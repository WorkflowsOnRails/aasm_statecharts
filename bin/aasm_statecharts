#!/Users/ashleyengelund/.rbenv/versions/2.3.1/bin/ruby -w

require 'optionparser'
require 'graphviz/constants'

require_relative File.join(__dir__, '..', 'lib', 'aasm_statecharts')


options = {
    all: false,
    format: 'png',
    directory: './doc',
    models: []
}

formats = GraphViz::Constants::FORMATS.join(', ')

parser = OptionParser.new do |opts|
  opts.banner = "Usage: aasm_statechart [options] <model> [models ...]\n   Where <model> is the lower case, underscored model name.  Ex:  'my_model' for the class MyModel\n\n   Options:"

  opts.on_tail('-v', '--version', 'version of this gem') do
    puts AASM_StateChart::VERSION
    exit(0)
  end


  opts.on( '-i', '--include PATH', "Include the path in the load path.\n PATH can have multiple directories, separated by your OS separator #{File::PATH_SEPARATOR}" ) do |path|
    options[:path] = path
  end

  opts.on('-d', '--directory DIRECTORY',
          "Output to a specific directory (default: #{options[:directory]})") do |directory|
    options[:directory] = directory
  end

  opts.on('-c', '--config FILE', 'Use the config file named FILE') do |config_file|
    options[:config_file] = config_file
  end

  opts.on('-t', '--table', 'Create a state transition table') do
    options[:transition_table] = true
  end

  opts.on('-f', '--file-type TYPE',
          "Output in the specified format (default: #{options[:format]}), which must be one of the following: #{formats}.") do |format|
    format = format.downcase

    unless AASM_StateChart::Chart_Renderer::FORMATS.include?(format)
      puts "error: #{format} is not a recognized file format."
      puts "The file format must be one of the following: #{formats}."
      exit(1)
    end

    options[:format] = format
  end

  opts
end

parser.parse!


if !options[:all] && ARGV.empty?
  puts "\n Missing model or '--all' option:  You must either specify a model to diagram or use the --all option.\n\n"
  puts parser
  exit(1)
end

options[:directory] = './doc' unless options.has_key? :directory # not needed

if options.has_key?(:config_file) && !File.exist?(options[:config_file])
  puts "\n Error:  The configuration file #{options[:config_file]} cannot be found.\n\n"
  exit(2)
end

ARGV.each do |model|
  options[:models] << model
end

puts options.inspect

AASM_StateChart::AASM_StateCharts.new(options).run
